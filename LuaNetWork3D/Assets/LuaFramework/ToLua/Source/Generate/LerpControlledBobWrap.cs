//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LerpControlledBobWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LerpControlledBob), typeof(System.Object));
		L.RegFunction("Offset", Offset);
		L.RegFunction("DoBobCycle", DoBobCycle);
		L.RegFunction("New", _CreateLerpControlledBob);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("BobDuration", get_BobDuration, set_BobDuration);
		L.RegVar("BobAmount", get_BobAmount, set_BobAmount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLerpControlledBob(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LerpControlledBob obj = new LerpControlledBob();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LerpControlledBob.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Offset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LerpControlledBob obj = (LerpControlledBob)ToLua.CheckObject<LerpControlledBob>(L, 1);
			float o = obj.Offset();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoBobCycle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LerpControlledBob obj = (LerpControlledBob)ToLua.CheckObject<LerpControlledBob>(L, 1);
			System.Collections.IEnumerator o = obj.DoBobCycle();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BobDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LerpControlledBob obj = (LerpControlledBob)o;
			float ret = obj.BobDuration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BobDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_BobAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LerpControlledBob obj = (LerpControlledBob)o;
			float ret = obj.BobAmount;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BobAmount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BobDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LerpControlledBob obj = (LerpControlledBob)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.BobDuration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BobDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_BobAmount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LerpControlledBob obj = (LerpControlledBob)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.BobAmount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index BobAmount on a nil value");
		}
	}
}

